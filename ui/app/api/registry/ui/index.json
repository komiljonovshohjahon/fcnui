[
  {
    "name": "button",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:flutter/material.dart';\nimport 'package:fcnui_base/fcnui_base.dart';\n\n/// [ButtonVariant] is the base class for all button variants\n///\n/// Can use these variants:\n/// - [PrimaryButtonVariant]\n/// - [SecondaryButtonVariant]\n/// - [TertiaryButtonVariant]\n/// - [ErrorButtonVariant]\n/// - [OutlineButtonVariant]\n/// - [GhostButtonVariant]\nabstract class ButtonVariant extends Equatable {\n  /// If [onPressed] is null, the button will be disabled\n  final VoidCallback? onPressed;\n\n  final String? text;\n\n  /// If [child] is provided, [text] will be ignored\n  ///\n  /// [child] will be used as the button's child\n  final Widget? child;\n\n  /// If true, it will show a loading indicator\n  ///\n  /// If [icon] is provided, icon will be replaced with loading indicator\n  ///\n  /// [onPressed] will be disabled if [isLoading] is true\n  final bool isLoading;\n\n  /// Icon of the button\n  ///\n  /// If [isLoading] is true, icon will be replaced with loading indicator\n  final IconData? icon;\n\n  /// Size of the icon\n  ///\n  /// Default is 18px\n  final double iconSize;\n\n  /// Minimum size of the button\n  ///\n  /// Default is 88px x 40px\n  final Size minimumSize;\n\n  ///Custom background color\n  ///\n  /// It will override the default background color if provided\n  final Color? backgroundColor;\n\n  ///Custom foreground color\n  ///\n  /// It will override the default foreground color if provided\n  final Color? foregroundColor;\n\n  const ButtonVariant(\n      {this.onPressed,\n      this.text,\n      this.backgroundColor,\n      this.foregroundColor,\n      this.iconSize = 18,\n      this.child,\n      this.isLoading = false,\n      this.minimumSize = const Size(88, 40),\n      this.icon});\n\n  @override\n  List<Object?> get props =>\n      [onPressed, text, child, isLoading, icon, iconSize];\n}\n\nclass PrimaryButtonVariant extends ButtonVariant {\n  const PrimaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass SecondaryButtonVariant extends ButtonVariant {\n  const SecondaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass TertiaryButtonVariant extends ButtonVariant {\n  const TertiaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass ErrorButtonVariant extends ButtonVariant {\n  const ErrorButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass OutlineButtonVariant extends ButtonVariant {\n  const OutlineButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass GhostButtonVariant extends ButtonVariant {\n  const GhostButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass DefaultButton extends StatelessWidget {\n  final ButtonVariant variant;\n\n  const DefaultButton({\n    super.key,\n    this.variant = const PrimaryButtonVariant(),\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(\n      builder: (context, vm) {\n        return getChild(context, vm);\n      },\n    );\n  }\n\n  Widget getChild(BuildContext context, ThemeVm vm) {\n    ///! Below part must not be changed\n\n    final theme = vm.theme;\n\n    ///! Above part must not be changed\n\n    return Theme(data: theme, child: _getButtonWidgetType(theme));\n  }\n\n  ButtonStyle _getButtonStyle(ThemeData theme) {\n    return ElevatedButton.styleFrom(\n      backgroundColor: _getBackgroundColor(theme),\n      foregroundColor: _getForegroundColor(theme),\n      minimumSize: variant.minimumSize,\n      shape: _getShape(theme),\n      side: _getBorder(theme),\n      padding: _getPadding(theme),\n      splashFactory: NoSplash.splashFactory,\n    );\n  }\n\n  EdgeInsetsGeometry _getPadding(ThemeData theme) {\n    switch (variant.runtimeType) {\n      default:\n        return const EdgeInsets.symmetric(horizontal: 16, vertical: 8);\n    }\n  }\n\n  Widget _getButtonWidgetType(ThemeData theme) {\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n      case const (SecondaryButtonVariant):\n      case const (TertiaryButtonVariant):\n      case const (ErrorButtonVariant):\n        if (variant.icon == null) {\n          return ElevatedButton(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            child: _getButtonChild(theme),\n          );\n        } else {\n          return ElevatedButton.icon(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            label: _getButtonChild(theme),\n            icon: variant.isLoading\n                ? const _LoadingIndicator()\n                : Icon(variant.icon, size: variant.iconSize),\n          );\n        }\n      case const (OutlineButtonVariant):\n      case const (GhostButtonVariant):\n        if (variant.icon == null) {\n          return TextButton(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            child: _getButtonChild(theme),\n          );\n        } else {\n          return TextButton.icon(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            label: _getButtonChild(theme),\n            icon: variant.isLoading\n                ? const _LoadingIndicator()\n                : Icon(variant.icon, size: variant.iconSize),\n          );\n        }\n      default:\n        return const SizedBox();\n    }\n  }\n\n  VoidCallback? get _getOnPressed {\n    switch (variant.runtimeType) {\n      default:\n        if (variant.isLoading) return null;\n        return variant.onPressed;\n    }\n  }\n\n  Color? _getBackgroundColor(ThemeData theme) {\n    if (variant.backgroundColor != null) return variant.backgroundColor;\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n        return theme.colorScheme.primary;\n      case const (SecondaryButtonVariant):\n        return theme.colorScheme.secondary;\n      case const (TertiaryButtonVariant):\n        return theme.colorScheme.tertiary;\n      case const (ErrorButtonVariant):\n        return theme.colorScheme.error;\n      default:\n        return null;\n    }\n  }\n\n  Color? _getForegroundColor(ThemeData theme) {\n    if (variant.foregroundColor != null) return variant.foregroundColor;\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n      case const (ErrorButtonVariant):\n        return theme.colorScheme.onPrimary;\n      case const (SecondaryButtonVariant):\n        return theme.colorScheme.onSecondary;\n      case const (TertiaryButtonVariant):\n        return theme.colorScheme.onTertiary;\n      default:\n        return null;\n    }\n  }\n\n  Widget _getButtonChild(ThemeData theme) {\n    final ch = variant.child ?? Text(_getText());\n    if (variant.icon == null) {\n      if (variant.isLoading) {\n        return Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            const _LoadingIndicator(),\n            const SizedBox(width: 8),\n            ch,\n          ],\n        );\n      }\n    }\n    return ch;\n  }\n\n  String _getText() {\n    if (variant.isLoading) {\n      return \"Please wait\";\n    }\n    return variant.text ?? 'Button';\n  }\n\n  BorderSide? _getBorder(ThemeData theme) {\n    switch (variant.runtimeType) {\n      case const (OutlineButtonVariant):\n        return BorderSide(color: theme.colorScheme.primary, width: 1);\n      default:\n        return null;\n    }\n  }\n\n  OutlinedBorder? _getShape(ThemeData theme) {\n    switch (variant.runtimeType) {\n      default:\n        return RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(6),\n        );\n    }\n  }\n}\n\nclass _LoadingIndicator extends StatelessWidget {\n  const _LoadingIndicator();\n\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox(\n      width: 20,\n      height: 20,\n      child: CircularProgressIndicator(strokeWidth: 2),\n    );\n  }\n}\n"
  }
]