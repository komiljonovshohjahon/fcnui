[
  {
    "name": "button",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:flutter/material.dart';\nimport 'package:fcnui_base/fcnui_base.dart';\n\n/// [ButtonVariant] is the base class for all button variants\n///\n/// Can use these variants:\n/// - [PrimaryButtonVariant]\n/// - [SecondaryButtonVariant]\n/// - [TertiaryButtonVariant]\n/// - [ErrorButtonVariant]\n/// - [OutlineButtonVariant]\n/// - [GhostButtonVariant]\nabstract class ButtonVariant extends Equatable {\n  /// If [onPressed] is null, the button will be disabled\n  final VoidCallback? onPressed;\n\n  final String? text;\n\n  /// If [child] is provided, [text] will be ignored\n  ///\n  /// [child] will be used as the button's child\n  final Widget? child;\n\n  /// If true, it will show a loading indicator\n  ///\n  /// If [icon] is provided, icon will be replaced with loading indicator\n  ///\n  /// [onPressed] will be disabled if [isLoading] is true\n  final bool isLoading;\n\n  /// Icon of the button\n  ///\n  /// If [isLoading] is true, icon will be replaced with loading indicator\n  final IconData? icon;\n\n  /// Size of the icon\n  ///\n  /// Default is 18px\n  final double iconSize;\n\n  /// Minimum size of the button\n  ///\n  /// Default is 88px x 40px\n  final Size? minimumSize;\n\n  ///Custom background color\n  ///\n  /// It will override the default background color if provided\n  final Color? backgroundColor;\n\n  ///Custom foreground color\n  ///\n  /// It will override the default foreground color if provided\n  final Color? foregroundColor;\n\n  const ButtonVariant(\n      {this.onPressed,\n      this.text,\n      this.backgroundColor,\n      this.foregroundColor,\n      this.iconSize = 18,\n      this.child,\n      this.isLoading = false,\n      this.minimumSize,\n      this.icon})\n      : assert(iconSize >= 0, \"iconSize must be greater than or equal to 0\"),\n        assert(text != null || child != null || icon != null,\n            \"text, child, or icon must be provided\");\n\n  @override\n  List<Object?> get props =>\n      [onPressed, text, child, isLoading, icon, iconSize];\n}\n\nclass PrimaryButtonVariant extends ButtonVariant {\n  const PrimaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass SecondaryButtonVariant extends ButtonVariant {\n  const SecondaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass TertiaryButtonVariant extends ButtonVariant {\n  const TertiaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass ErrorButtonVariant extends ButtonVariant {\n  const ErrorButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass OutlineButtonVariant extends ButtonVariant {\n  const OutlineButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass GhostButtonVariant extends ButtonVariant {\n  const GhostButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass DefaultButton extends StatelessWidget {\n  final ButtonVariant variant;\n\n  const DefaultButton({super.key, required this.variant});\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(\n      builder: (context, vm) {\n        return getChild(vm);\n      },\n    );\n  }\n\n  Widget getChild(ThemeVm vm) {\n    return Theme(\n        data: vm.theme.copyWith(\n          elevatedButtonTheme: ElevatedButtonThemeData(\n            style: _getButtonStyle(vm.theme),\n          ),\n          textButtonTheme: TextButtonThemeData(\n            style: _getButtonStyle(vm.theme),\n          ),\n        ),\n        child: _getButtonWidgetType(vm.theme));\n  }\n\n  ButtonStyle _getButtonStyle(ThemeData theme) {\n    return ElevatedButton.styleFrom(\n      disabledBackgroundColor: _getBackgroundColor(theme)?.withOpacity(0.5),\n      disabledForegroundColor: _getForegroundColor(theme)?.withOpacity(0.5),\n      backgroundColor: _getBackgroundColor(theme),\n      foregroundColor: _getForegroundColor(theme),\n      shape: _getShape(theme),\n      side: _getBorder(theme),\n      padding: _getPadding(theme),\n      minimumSize: variant.minimumSize?.w,\n      splashFactory: NoSplash.splashFactory,\n      disabledMouseCursor: SystemMouseCursors.forbidden,\n      surfaceTintColor: theme.colorScheme.surface,\n      textStyle: _getTextStyle(theme),\n    );\n  }\n\n  TextStyle _getTextStyle(ThemeData theme) {\n    return theme.textTheme.bodyMedium!.sp;\n  }\n\n  EdgeInsetsGeometry _getPadding(ThemeData theme) {\n    switch (variant.runtimeType) {\n      default:\n        return const EdgeInsets.symmetric(horizontal: 16, vertical: 8).w;\n    }\n  }\n\n  Widget _getButtonWidgetType(ThemeData theme) {\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n      case const (SecondaryButtonVariant):\n      case const (TertiaryButtonVariant):\n      case const (ErrorButtonVariant):\n        if (variant.icon == null) {\n          return ElevatedButton(\n            onPressed: _getOnPressed,\n            child: _getButtonChild(theme),\n          );\n        } else {\n          if (variant.text != null && variant.text!.isNotEmpty) {\n            return ElevatedButton.icon(\n              onPressed: _getOnPressed,\n              label: _getButtonChild(theme),\n              icon: variant.isLoading\n                  ? const _LoadingIndicator()\n                  : Icon(variant.icon, size: variant.iconSize.w),\n            );\n          }\n          return ElevatedButton(\n            onPressed: _getOnPressed,\n            child: variant.isLoading\n                ? const _LoadingIndicator()\n                : Icon(variant.icon, size: variant.iconSize.w),\n          );\n        }\n      case const (OutlineButtonVariant):\n      case const (GhostButtonVariant):\n        if (variant.icon == null) {\n          return TextButton(\n            onPressed: _getOnPressed,\n            child: _getButtonChild(theme),\n          );\n        } else {\n          return TextButton.icon(\n            onPressed: _getOnPressed,\n            label: _getButtonChild(theme),\n            icon: variant.isLoading\n                ? const _LoadingIndicator()\n                : Icon(variant.icon, size: variant.iconSize.w),\n          );\n        }\n      default:\n        return const SizedBox();\n    }\n  }\n\n  VoidCallback? get _getOnPressed {\n    switch (variant.runtimeType) {\n      default:\n        if (variant.isLoading) return null;\n        return variant.onPressed;\n    }\n  }\n\n  Color? _getBackgroundColor(ThemeData theme) {\n    if (variant.backgroundColor != null) return variant.backgroundColor;\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n        return theme.colorScheme.primary;\n      case const (SecondaryButtonVariant):\n        return theme.colorScheme.secondary;\n      case const (TertiaryButtonVariant):\n        return theme.colorScheme.tertiary;\n      case const (ErrorButtonVariant):\n        return theme.colorScheme.error;\n      default:\n        return null;\n    }\n  }\n\n  Color? _getForegroundColor(ThemeData theme) {\n    if (variant.foregroundColor != null) return variant.foregroundColor;\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n      case const (ErrorButtonVariant):\n        return theme.colorScheme.onPrimary;\n      case const (SecondaryButtonVariant):\n        return theme.colorScheme.onSecondary;\n      case const (TertiaryButtonVariant):\n        return theme.colorScheme.onTertiary;\n      case const (OutlineButtonVariant):\n      case const (GhostButtonVariant):\n        return theme.colorScheme.onSurface;\n      default:\n        return null;\n    }\n  }\n\n  Widget _getButtonChild(ThemeData theme) {\n    final ch = variant.child ?? Text(_getText());\n    if (variant.icon == null) {\n      if (variant.isLoading) {\n        return Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            const _LoadingIndicator(),\n            ch,\n          ],\n        ).spaced(8);\n      }\n    }\n    return ch;\n  }\n\n  String _getText() {\n    return variant.text ?? 'Button';\n  }\n\n  BorderSide? _getBorder(ThemeData theme) {\n    switch (variant.runtimeType) {\n      case const (OutlineButtonVariant):\n        return BorderSide(color: theme.colorScheme.outline).w;\n      default:\n        return null;\n    }\n  }\n\n  OutlinedBorder? _getShape(ThemeData theme) {\n    switch (variant.runtimeType) {\n      default:\n        return RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(6).r,\n        );\n    }\n  }\n}\n\nclass _LoadingIndicator extends StatelessWidget {\n  const _LoadingIndicator();\n\n  @override\n  Widget build(BuildContext context) {\n    return SizedBox(\n      width: 20.w,\n      height: 20.h,\n      child: CircularProgressIndicator(strokeWidth: 2.w),\n    );\n  }\n}\n"
  },
  {
    "name": "card",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'package:flutter/material.dart';\n\nclass CardVariant extends Equatable {\n  final CardTitle title;\n\n  final CardSubtitle? subtitle;\n\n  final CardContent content;\n\n  final CardFooter footer;\n\n  const CardVariant({\n    required this.title,\n    this.subtitle,\n    required this.content,\n    required this.footer,\n  });\n\n  @override\n  List<Object?> get props => [title, content, footer, subtitle];\n}\n\nclass CardDecoration extends Equatable {\n  final EdgeInsetsGeometry? padding;\n  final Border? border;\n  final BorderRadiusGeometry borderRadius;\n  final Color? color;\n  final List<BoxShadow>? boxShadow;\n  final CrossAxisAlignment childrenCrossAxisAlignment;\n\n  const CardDecoration({\n    this.padding,\n    this.border,\n    this.boxShadow,\n    this.borderRadius = const BorderRadius.all(Radius.circular(8)),\n    this.color,\n    this.childrenCrossAxisAlignment = CrossAxisAlignment.start,\n  });\n\n  @override\n  List<Object?> get props => [padding, border, borderRadius, color];\n}\n\nclass CardTitle extends Equatable {\n  final String title;\n\n  /// If [style] is null, it will use the default style\n  final TextStyle? style;\n\n  const CardTitle({\n    required this.title,\n    this.style,\n  });\n\n  @override\n  List<Object?> get props => [title, style];\n}\n\nclass CardSubtitle extends Equatable {\n  final String subtitle;\n\n  /// If [style] is null, it will use the default style\n  final TextStyle? style;\n\n  const CardSubtitle({\n    required this.subtitle,\n    this.style,\n  });\n\n  @override\n  List<Object?> get props => [subtitle, style];\n}\n\nclass CardContent extends Equatable {\n  final Widget content;\n\n  const CardContent({\n    required this.content,\n  });\n\n  @override\n  List<Object?> get props => [content];\n}\n\nclass CardFooter extends Equatable {\n  final List<Widget> footer;\n\n  final MainAxisAlignment mainAxisAlignment;\n\n  final Axis direction;\n\n  const CardFooter({\n    required this.footer,\n    this.mainAxisAlignment = MainAxisAlignment.spaceBetween,\n    this.direction = Axis.horizontal,\n  });\n\n  @override\n  List<Object?> get props => [footer, mainAxisAlignment, direction];\n}\n\nclass CardCustom extends Equatable {\n  final Widget widget;\n\n  const CardCustom({\n    required this.widget,\n  });\n\n  @override\n  List<Object?> get props => [widget];\n}\n\nclass DefaultCard extends StatelessWidget {\n  final CardVariant? variant;\n  final CardCustom? custom;\n  final CardDecoration decoration;\n\n  const DefaultCard({\n    super.key,\n    this.variant,\n    this.custom,\n    this.decoration = const CardDecoration(),\n  })\n  //Assert 1 of them is not null\n  : assert(variant != null || custom != null,\n            'DefaultCard: variant and custom cannot be null at the same time');\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(\n      builder: (context, vm) {\n        return getChild(vm);\n      },\n    );\n  }\n\n  Widget getChild(ThemeVm vm) {\n    return _getCard(vm.theme);\n  }\n\n  Widget _getCard(ThemeData theme) {\n    final EdgeInsets defaultPadding = const EdgeInsets.all(24).w;\n    final List<BoxShadow> cardShadow = [\n      BoxShadow(\n        offset: const Offset(0, 2).w,\n        blurRadius: 4.r,\n        spreadRadius: 0,\n        color: Colors.black.withOpacity(0.08),\n      ),\n      BoxShadow(\n        offset: const Offset(0, 3).w,\n        blurRadius: 10.r,\n        spreadRadius: 0,\n        color: Colors.black.withOpacity(0.1),\n      )\n    ];\n\n    final border = Border.all(\n            color: theme.colorScheme.onSurface.withOpacity(0.1),\n            width: 1,\n            strokeAlign: BorderSide.strokeAlignInside)\n        .w;\n\n    final color = decoration.color ?? theme.colorScheme.surface;\n\n    return DecoratedBox(\n        decoration: BoxDecoration(\n          color: color,\n          borderRadius: decoration.borderRadius,\n          boxShadow: decoration.boxShadow ?? cardShadow,\n          border: decoration.border ?? border,\n        ),\n        child: custom == null\n            ? Padding(\n                padding: decoration.padding ?? defaultPadding,\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  crossAxisAlignment: decoration.childrenCrossAxisAlignment,\n                  children: [\n                    _getTitle(theme),\n                    if (variant!.subtitle != null) _getSubtitle(theme),\n                    _getContent(theme),\n                    _getFooter(theme),\n                  ],\n                ),\n              )\n            : Padding(\n                padding: decoration.padding ?? defaultPadding,\n                child: custom!.widget,\n              ));\n  }\n\n  Widget _getTitle(ThemeData theme) {\n    final title = variant!.title;\n    return Text(\n      title.title,\n      style: (title.style ??\n              theme.textTheme.headlineSmall!\n                  .copyWith(fontWeight: FontWeight.bold))\n          .sp,\n    );\n  }\n\n  Widget _getSubtitle(ThemeData theme) {\n    final subtitle = variant!.subtitle!;\n\n    Widget widget = Text(\n      subtitle.subtitle,\n      style: (subtitle.style ??\n              theme.textTheme.labelLarge!.copyWith(\n                  fontWeight: FontWeight.normal,\n                  color: theme.colorScheme.onSurface.withOpacity(0.6)))\n          .sp,\n    );\n\n    return Padding(\n      padding: EdgeInsets.only(top: 12.h),\n      child: widget,\n    );\n  }\n\n  Widget _getContent(ThemeData theme) {\n    final content = variant!.content;\n\n    Widget widget = content.content;\n\n    return Padding(\n      padding: EdgeInsets.only(top: 22.h),\n      child: widget,\n    );\n  }\n\n  Widget _getFooter(ThemeData theme) {\n    final footer = variant!.footer;\n\n    Widget widget = Row(\n      mainAxisAlignment: footer.mainAxisAlignment,\n      children: footer.footer.length == 1\n          ? [Expanded(child: footer.footer.first)]\n          : footer.footer,\n    );\n\n    return Padding(\n      padding: EdgeInsets.only(top: 22.h),\n      child: widget,\n    );\n  }\n}\n"
  },
  {
    "name": "disabled",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:flutter/material.dart';\n\nclass DisabledVm {\n  final bool disabled;\n  final double opacity;\n  final Widget child;\n  final bool showForbiddenCursor;\n\n  const DisabledVm({\n    required this.disabled,\n    this.opacity = .5,\n    required this.child,\n    this.showForbiddenCursor = true,\n  });\n}\n\nclass DefaultDisabled extends StatelessWidget {\n  final DisabledVm vm;\n  const DefaultDisabled({super.key, required this.vm});\n\n  @override\n  Widget build(BuildContext context) {\n    Widget view = AbsorbPointer(\n      absorbing: vm.disabled,\n      child: vm.child,\n    );\n\n    if (vm.showForbiddenCursor && vm.disabled) {\n      view = MouseRegion(cursor: SystemMouseCursors.forbidden, child: view);\n    }\n\n    return Opacity(opacity: vm.disabled ? vm.opacity : 1, child: view);\n  }\n}\n"
  },
  {
    "name": "input",
    "version": "0.0.1",
    "dependencies": [
      "form",
      "with_label",
      "save_button"
    ],
    "content": "//v0.0.1\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'form.dart';\nimport 'disabled.dart';\n\nclass InputModel extends IFormModel {\n  final String? initialValue;\n  final ValueChanged<String?>? onChanged;\n  final int? maxLines;\n  final List<FormFieldValidator<String>> validators;\n  final List<TextInputFormatter> inputFormatters;\n  final bool enabled;\n  final bool readOnly;\n  final String? hintText;\n  final String? helperText;\n  final ValueTransformer<String?>? valueTransformer;\n\n  const InputModel({\n    required super.name,\n    this.initialValue,\n    this.onChanged,\n    this.valueTransformer,\n    this.helperText,\n    this.enabled = true,\n    this.readOnly = false,\n    this.maxLines,\n    this.hintText,\n    this.validators = const [],\n    this.inputFormatters = const [],\n  });\n\n  @override\n  List<Object?> get props => [\n        name,\n        initialValue,\n        onChanged,\n        valueTransformer,\n        helperText,\n        enabled,\n        readOnly,\n        maxLines,\n        hintText,\n        validators,\n        inputFormatters,\n      ];\n}\n\nclass DefaultInput extends StatelessWidget {\n  final InputModel vm;\n\n  const DefaultInput({super.key, required this.vm});\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(builder: (context, vm) {\n      return _getChild(vm);\n    });\n  }\n\n  Widget _getChild(ThemeVm themeVm) {\n    final theme = themeVm.theme;\n    return DefaultDisabled(\n        vm: DisabledVm(\n      disabled: !vm.enabled,\n      child: Theme(\n        data: theme.copyWith(\n          inputDecorationTheme: InputDecorationTheme(\n            hoverColor: Colors.transparent,\n            //Border when tapped and focused\n            focusedBorder: OutlineInputBorder(\n                borderRadius: BorderRadius.circular(8).r,\n                borderSide: BorderSide(\n                        color: theme.colorScheme.primary,\n                        width: 2,\n                        strokeAlign: BorderSide.strokeAlignOutside)\n                    .w),\n            //Idle state border\n            enabledBorder: OutlineInputBorder(\n              borderRadius: BorderRadius.circular(8).r,\n              borderSide: BorderSide(\n                      color: theme.dividerColor,\n                      strokeAlign: BorderSide.strokeAlignInside)\n                  .w,\n            ),\n            errorBorder: OutlineInputBorder(\n              borderRadius: BorderRadius.circular(8).r,\n              borderSide: const BorderSide(\n                      color: Colors.red,\n                      strokeAlign: BorderSide.strokeAlignInside)\n                  .w,\n            ),\n            disabledBorder: OutlineInputBorder(\n              borderRadius: BorderRadius.circular(8).r,\n              borderSide: BorderSide(\n                      color: theme.dividerColor.withOpacity(0.6),\n                      strokeAlign: BorderSide.strokeAlignInside)\n                  .w,\n            ),\n            focusedErrorBorder: OutlineInputBorder(\n              borderRadius: BorderRadius.circular(8).r,\n              borderSide: const BorderSide(\n                      color: Colors.red,\n                      width: 2,\n                      strokeAlign: BorderSide.strokeAlignOutside)\n                  .w,\n            ),\n            errorStyle:\n                theme.textTheme.bodyMedium!.copyWith(color: Colors.red).sp,\n            helperStyle: theme.textTheme.bodyMedium!\n                .copyWith(color: theme.colorScheme.onSurface.withOpacity(0.6))\n                .sp,\n            contentPadding:\n                const EdgeInsets.symmetric(horizontal: 12, vertical: 8).w,\n            floatingLabelBehavior: FloatingLabelBehavior.never,\n            filled: true,\n            fillColor: theme.colorScheme.surface,\n            hintStyle: theme.textTheme.bodyMedium!\n                .copyWith(color: theme.colorScheme.onSurface.withOpacity(0.4))\n                .sp,\n          ),\n        ),\n        child: FormBuilderTextField(\n          style: theme.textTheme.bodyLarge!\n              .copyWith(\n                  color: theme.colorScheme.onSurface,\n                  fontWeight: FontWeight.normal)\n              .sp,\n          name: vm.name,\n          initialValue: vm.initialValue,\n          onChanged: vm.onChanged,\n          maxLines: vm.maxLines,\n          validator: FormBuilderValidators.compose(vm.validators),\n          inputFormatters: vm.inputFormatters,\n          enabled: vm.enabled,\n          valueTransformer: vm.valueTransformer,\n          readOnly: vm.readOnly,\n          decoration: InputDecoration(\n            helperText: vm.helperText,\n            hintText: vm.hintText,\n          ),\n        ),\n      ),\n    ));\n  }\n}\n"
  },
  {
    "name": "form",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'package:flutter/material.dart';\n\nabstract class IFormModel extends Equatable {\n  ///This will form the key in the form value Map\n  final String name;\n\n  const IFormModel({\n    required this.name,\n  });\n}\n\nclass FormModel {\n  /// Used for [FormBuilder] to control form\n  final GlobalKey<FormBuilderState> formKey = GlobalKey<FormBuilderState>();\n\n  /// Used for [SaveButton] to enable/disable button\n  final ValueNotifier<bool> isValidFormNotifier = ValueNotifier(false);\n\n  /// Returns true if form is valid\n  bool get isValid => formKey.currentState?.isValid ?? false;\n\n  /// Callback for onChanged event\n  ///\n  /// Triggered when any field in form is changed\n  void Function()? onChanged;\n\n  /// Returns single value from form\n  dynamic getValue(String name) => formKey.currentState?.fields[name]?.value;\n\n  /// Returns all values from form\n  Map<String, dynamic> getValues() => formKey.currentState?.value ?? {};\n\n  /// Set single value to form\n  void patchValue(Map<String, dynamic> value, {bool isSave = true}) {\n    formKey.currentState?.patchValue(value);\n    if (isSave) save();\n  }\n\n  /// Set all values to form\n  void save() => formKey.currentState?.save();\n\n  /// Reset form to initial state\n  void reset() => formKey.currentState?.reset();\n\n  /// Validate form\n  void validate(\n          {bool focusOnInvalid = true,\n          bool autoScrollWhenFocusOnInvalid = false}) =>\n      formKey.currentState?.validate(\n          autoScrollWhenFocusOnInvalid: autoScrollWhenFocusOnInvalid,\n          focusOnInvalid: focusOnInvalid);\n\n  /// Save and validate form\n  void saveAndValidate(\n          {bool focusOnInvalid = true,\n          bool autoScrollWhenFocusOnInvalid = false}) =>\n      formKey.currentState?.saveAndValidate(\n          autoScrollWhenFocusOnInvalid: autoScrollWhenFocusOnInvalid,\n          focusOnInvalid: focusOnInvalid);\n\n  /// Invalidate field\n  ///\n  /// Show error message on field if it's invalid\n  void invalidateField(String name, String message) =>\n      formKey.currentState?.fields[name]\n          ?.invalidate(message, shouldFocus: false);\n}\n\nclass DefaultForm extends StatelessWidget {\n  final FormModel vm;\n  final Widget child;\n  final bool clearValueOnUnregister;\n\n  /// If true, the form will save and validate on every change\n  ///\n  /// Used to auto validate on form change\n  ///\n  /// If using [SaveButton] trigger [autoValidate] field true.\n  final bool saveAndValidateOnChange;\n  const DefaultForm(\n      {super.key,\n      required this.vm,\n      required this.child,\n      this.saveAndValidateOnChange = false,\n      this.clearValueOnUnregister = false});\n\n  @override\n  Widget build(BuildContext context) {\n    return FormBuilder(\n      clearValueOnUnregister: clearValueOnUnregister,\n      key: vm.formKey,\n      onChanged: () {\n        if (saveAndValidateOnChange) {\n          vm.formKey.currentState?.save();\n        }\n        vm.isValidFormNotifier.value = vm.isValid;\n        vm.onChanged?.call();\n      },\n      child: child,\n    );\n  }\n}\n"
  },
  {
    "name": "label",
    "version": "0.0.1",
    "dependencies": [
      "disabled"
    ],
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'package:flutter/material.dart';\nimport 'disabled.dart';\n\nclass LabelModel extends Equatable {\n  final String text;\n  final bool isRequired;\n  final bool enabled;\n  const LabelModel({\n    required this.text,\n    this.enabled = true,\n    this.isRequired = false,\n  });\n\n  @override\n  List<Object?> get props => [\n        text,\n        isRequired,\n        enabled,\n      ];\n}\n\nclass Label extends StatelessWidget {\n  final LabelModel vm;\n  const Label({super.key, required this.vm});\n\n  @override\n  Widget build(BuildContext context) {\n    return DefaultDisabled(\n        vm: DisabledVm(\n      disabled: !vm.enabled,\n      child: RichText(\n          text: TextSpan(children: [\n        TextSpan(\n            text: vm.text,\n            style: Theme.of(context).textTheme.titleSmall!.copyWith(\n                  fontWeight: FontWeight.normal,\n                  color: vm.enabled\n                      ? null\n                      : Theme.of(context)\n                          .colorScheme\n                          .onSurface\n                          .withOpacity(0.4),\n                )),\n        if (vm.isRequired)\n          TextSpan(\n              text: \"\\t*\",\n              style: Theme.of(context)\n                  .textTheme\n                  .titleMedium!\n                  .copyWith(color: Colors.red))\n      ])),\n    ));\n  }\n}\n"
  },
  {
    "name": "with_label",
    "version": "0.0.1",
    "dependencies": [
      "label"
    ],
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'package:flutter/material.dart';\nimport 'label.dart';\n\nexport 'label.dart';\n\nclass WithLabel extends StatelessWidget {\n  final LabelModel labelVm;\n  final Widget child;\n  const WithLabel({super.key, required this.labelVm, required this.child});\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      mainAxisSize: MainAxisSize.min,\n      children: [\n        Label(vm: labelVm),\n        child,\n      ],\n    ).spaced(4);\n  }\n}\n"
  },
  {
    "name": "save_button",
    "version": "0.0.1",
    "dependencies": [
      "button",
      "form"
    ],
    "content": "//v0.0.1\n\nimport 'package:flutter/material.dart';\nimport 'form.dart';\nimport 'button.dart';\n\nclass SaveButton extends StatelessWidget {\n  final FormModel vm;\n  final ValueChanged<Map<String, dynamic>>? onSave;\n  final String text;\n  final bool autoValidate;\n  const SaveButton(\n      {super.key,\n      required this.vm,\n      required this.onSave,\n      this.text = \"Save\",\n      this.autoValidate = false});\n\n  @override\n  Widget build(BuildContext context) {\n    if (autoValidate) {\n      return ValueListenableBuilder<bool>(\n          valueListenable: vm.isValidFormNotifier,\n          builder: (context, value, child) {\n            return DefaultButton(\n              variant: PrimaryButtonVariant(\n                text: text,\n                minimumSize: const Size(0, 54),\n                onPressed: value\n                    ? () {\n                        vm.formKey.currentState?.saveAndValidate();\n                        onSave?.call(vm.formKey.currentState?.value\n                            as Map<String, dynamic>);\n                      }\n                    : null,\n              ),\n            );\n          });\n    } else {\n      return DefaultButton(\n        variant: PrimaryButtonVariant(\n            text: text,\n            minimumSize: const Size(0, 54),\n            onPressed: onSave == null\n                ? null\n                : () {\n                    vm.formKey.currentState?.saveAndValidate();\n                    onSave!(\n                        vm.formKey.currentState?.value as Map<String, dynamic>);\n                  }),\n      );\n    }\n  }\n}\n"
  },
  {
    "name": "dp_item",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\n\nclass DpItem extends Equatable {\n  final String id;\n  final String title;\n  final String? subtitle;\n\n  const DpItem({required this.id, required this.title, this.subtitle});\n\n  @override\n  List<Object?> get props => [id, title, subtitle];\n}\n"
  },
  {
    "name": "checkbox",
    "version": "0.0.1",
    "dependencies": [
      "disabled",
      "form",
      "dp_item"
    ],
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'package:flutter/material.dart';\nimport 'disabled.dart';\nimport 'dp_item.dart';\nimport 'form.dart';\n\nclass CheckboxModel extends IFormModel {\n  final List<DpItem> items;\n  final ValueChanged<List<String>?>? onChanged;\n  final List<String>? initialValues;\n  final List<String> disabled;\n  final bool enabled;\n  final String? Function(List<String>?)? validator;\n  final OptionsOrientation? orientation;\n  final AutovalidateMode autovalidateMode;\n  final Axis? wrapDirection;\n  final String? helperText;\n  final String? title;\n  final String? subtitle;\n\n  const CheckboxModel({\n    required super.name,\n    required this.items,\n    this.onChanged,\n    this.wrapDirection,\n    this.orientation,\n    this.autovalidateMode = AutovalidateMode.disabled,\n    this.initialValues,\n    this.helperText,\n    this.disabled = const [],\n    this.enabled = true,\n    this.validator,\n    this.subtitle,\n    this.title,\n  });\n\n  @override\n  List<Object?> get props => [\n        name,\n        items,\n        onChanged,\n        orientation,\n        initialValues,\n        disabled,\n        enabled,\n        validator,\n        autovalidateMode,\n        wrapDirection,\n        helperText,\n        title,\n        subtitle,\n      ];\n}\n\nclass FormCheckbox extends StatelessWidget {\n  final CheckboxModel vm;\n  const FormCheckbox({super.key, required this.vm});\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(builder: (context, themeVm) {\n      final theme = themeVm.theme;\n      return _getChild(theme);\n    });\n  }\n\n  Widget _getChild(ThemeData theme) {\n    return DefaultDisabled(\n        vm: DisabledVm(\n      disabled: !vm.enabled,\n      child: Theme(\n        data: theme.copyWith(checkboxTheme: _getCheckboxTheme(theme)),\n        child: FormBuilderField<List<String>>(\n          name: vm.name,\n          enabled: vm.enabled,\n          validator: vm.validator,\n          onChanged: vm.onChanged,\n          initialValue: vm.initialValues,\n          autovalidateMode: vm.autovalidateMode,\n          builder: (field) {\n            return Column(\n              mainAxisSize: MainAxisSize.min,\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                if (vm.title != null)\n                  Text(vm.title!,\n                      style: theme.textTheme.titleMedium!.copyWith(\n                        color: field.errorText == null ? null : Colors.red,\n                      )),\n                if (vm.subtitle != null)\n                  Text(vm.subtitle!,\n                      style: theme.textTheme.bodySmall!.copyWith(\n                          color: theme.colorScheme.onSurface.withOpacity(0.6))),\n                if (vm.title != null || vm.subtitle != null)\n                  const SizedBox(height: 4),\n                GroupCheckbox(field: field, vm: vm),\n                if (vm.helperText != null)\n                  Text(vm.helperText!, style: theme.textTheme.bodyMedium),\n                if (field.errorText != null)\n                  Text(\n                    field.errorText!,\n                    style:\n                        theme.textTheme.bodySmall?.copyWith(color: Colors.red),\n                  ),\n              ],\n            ).spaced(4);\n          },\n        ),\n      ),\n    ));\n  }\n\n  CheckboxThemeData _getCheckboxTheme(ThemeData theme) {\n    return theme.checkboxTheme.copyWith(\n        side: BorderSide(color: theme.colorScheme.onSurface, width: 1).w,\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(4).r),\n        overlayColor: const MaterialStatePropertyAll(Colors.transparent),\n        splashRadius: 0);\n  }\n}\n\nclass GroupCheckbox extends StatelessWidget {\n  final FormFieldState<List<String>> field;\n  final CheckboxModel vm;\n  const GroupCheckbox({super.key, required this.field, required this.vm});\n\n  @override\n  Widget build(BuildContext context) {\n    if (vm.orientation == OptionsOrientation.horizontal) {\n      return Row(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          for (final item in vm.items)\n            CustomCheckbox(\n              field: field,\n              item: item,\n              vm: vm,\n            ),\n        ],\n      );\n    } else if (vm.orientation == OptionsOrientation.vertical) {\n      return Column(\n        mainAxisSize: MainAxisSize.min,\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: [\n          for (final item in vm.items)\n            CustomCheckbox(\n              field: field,\n              item: item,\n              vm: vm,\n            ),\n        ],\n      );\n    }\n    return Wrap(\n      spacing: 10.0,\n      runSpacing: 10.0,\n      direction: vm.wrapDirection ?? Axis.horizontal,\n      children: [\n        for (final item in vm.items)\n          CustomCheckbox(\n            field: field,\n            item: item,\n            vm: vm,\n          ),\n      ],\n    );\n  }\n}\n\nclass CustomCheckbox extends StatelessWidget {\n  final FormFieldState<List<String>> field;\n  final DpItem item;\n  final CheckboxModel vm;\n\n  const CustomCheckbox(\n      {super.key, required this.field, required this.vm, required this.item});\n\n  @override\n  Widget build(BuildContext context) {\n    final bool isDisabled = vm.disabled.contains(item.id);\n    final textTheme = Theme.of(context).textTheme;\n    final colorScheme = Theme.of(context).colorScheme;\n    final bool isValid = field.errorText == null;\n    return DefaultDisabled(\n      vm: DisabledVm(\n          disabled: isDisabled,\n          child: GestureDetector(\n            onTap: () {\n              onCheckboxChanged(!(field.value?.contains(item.id) ?? false));\n            },\n            child: Row(\n              mainAxisSize: MainAxisSize.min,\n              crossAxisAlignment: item.subtitle != null\n                  ? CrossAxisAlignment.start\n                  : CrossAxisAlignment.center,\n              children: [\n                //Checkbox\n                Checkbox(\n                    value: field.value?.contains(item.id) ??\n                        vm.initialValues?.contains(item.id) ??\n                        false,\n                    onChanged: onCheckboxChanged),\n\n                Column(\n                  mainAxisSize: MainAxisSize.min,\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    //Title\n                    Text(\n                      item.title,\n                      style: TextStyle(\n                        color:\n                            isValid ? null : (isDisabled ? null : Colors.red),\n                      ),\n                    ),\n\n                    //Subtitle, if any\n                    if (item.subtitle != null)\n                      Text(item.subtitle!,\n                          style: textTheme.bodySmall?.copyWith(\n                              color: colorScheme.onSurface.withOpacity(0.6))),\n                  ],\n                ).spaced(2),\n              ],\n            ).spaced(4),\n          )),\n    );\n  }\n\n  void onCheckboxChanged(bool? value) {\n    if (value == true) {\n      field.didChange([...(field.value ?? []), item.id]);\n    } else {\n      field.didChange(field.value?.where((e) => e != item.id).toList());\n    }\n    vm.onChanged?.call(field.value);\n  }\n}\n"
  }
]