[
  {
    "name": "button",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:flutter/material.dart';\nimport 'package:fcnui_base/fcnui_base.dart';\n\n/// [ButtonVariant] is the base class for all button variants\n///\n/// Can use these variants:\n/// - [PrimaryButtonVariant]\n/// - [SecondaryButtonVariant]\n/// - [TertiaryButtonVariant]\n/// - [ErrorButtonVariant]\n/// - [OutlineButtonVariant]\n/// - [GhostButtonVariant]\nabstract class ButtonVariant extends Equatable {\n  /// If [onPressed] is null, the button will be disabled\n  final VoidCallback? onPressed;\n\n  final String? text;\n\n  /// If [child] is provided, [text] will be ignored\n  ///\n  /// [child] will be used as the button's child\n  final Widget? child;\n\n  /// If true, it will show a loading indicator\n  ///\n  /// If [icon] is provided, icon will be replaced with loading indicator\n  ///\n  /// [onPressed] will be disabled if [isLoading] is true\n  final bool isLoading;\n\n  /// Icon of the button\n  ///\n  /// If [isLoading] is true, icon will be replaced with loading indicator\n  final IconData? icon;\n\n  /// Size of the icon\n  ///\n  /// Default is 18px\n  final double iconSize;\n\n  /// Minimum size of the button\n  ///\n  /// Default is 88px x 40px\n  final Size minimumSize;\n\n  ///Custom background color\n  ///\n  /// It will override the default background color if provided\n  final Color? backgroundColor;\n\n  ///Custom foreground color\n  ///\n  /// It will override the default foreground color if provided\n  final Color? foregroundColor;\n\n  const ButtonVariant(\n      {this.onPressed,\n      this.text,\n      this.backgroundColor,\n      this.foregroundColor,\n      this.iconSize = 18,\n      this.child,\n      this.isLoading = false,\n      this.minimumSize = const Size.square(40),\n      this.icon})\n      : assert(iconSize >= 0, \"iconSize must be greater than or equal to 0\"),\n        assert(text != null || child != null || icon != null,\n            \"text, child, or icon must be provided\");\n\n  @override\n  List<Object?> get props =>\n      [onPressed, text, child, isLoading, icon, iconSize];\n}\n\nclass PrimaryButtonVariant extends ButtonVariant {\n  const PrimaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass SecondaryButtonVariant extends ButtonVariant {\n  const SecondaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass TertiaryButtonVariant extends ButtonVariant {\n  const TertiaryButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass ErrorButtonVariant extends ButtonVariant {\n  const ErrorButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass OutlineButtonVariant extends ButtonVariant {\n  const OutlineButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass GhostButtonVariant extends ButtonVariant {\n  const GhostButtonVariant(\n      {super.onPressed,\n      super.text,\n      super.child,\n      super.isLoading,\n      super.icon,\n      super.iconSize,\n      super.minimumSize,\n      super.backgroundColor,\n      super.foregroundColor});\n}\n\nclass DefaultButton extends StatelessWidget {\n  final ButtonVariant variant;\n\n  const DefaultButton({super.key, required this.variant});\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(\n      builder: (context, vm) {\n        return getChild(context, vm);\n      },\n    );\n  }\n\n  Widget getChild(BuildContext context, ThemeVm vm) {\n    final theme = vm.theme;\n    return _getButtonWidgetType(theme);\n  }\n\n  ButtonStyle _getButtonStyle(ThemeData theme) {\n    return ElevatedButton.styleFrom(\n      disabledBackgroundColor: _getBackgroundColor(theme)?.withOpacity(0.5),\n      disabledForegroundColor: _getForegroundColor(theme)?.withOpacity(0.5),\n      backgroundColor: _getBackgroundColor(theme),\n      foregroundColor: _getForegroundColor(theme),\n      shape: _getShape(theme),\n      side: _getBorder(theme),\n      padding: _getPadding(theme),\n      minimumSize: variant.minimumSize,\n      splashFactory: NoSplash.splashFactory,\n      disabledMouseCursor: SystemMouseCursors.forbidden,\n      surfaceTintColor: theme.colorScheme.surface,\n    );\n  }\n\n  EdgeInsetsGeometry _getPadding(ThemeData theme) {\n    switch (variant.runtimeType) {\n      default:\n        return const EdgeInsets.symmetric(horizontal: 16, vertical: 8);\n    }\n  }\n\n  Widget _getButtonWidgetType(ThemeData theme) {\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n      case const (SecondaryButtonVariant):\n      case const (TertiaryButtonVariant):\n      case const (ErrorButtonVariant):\n        if (variant.icon == null) {\n          return ElevatedButton(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            child: _getButtonChild(theme),\n          );\n        } else {\n          if (variant.text != null && variant.text!.isNotEmpty) {\n            return ElevatedButton.icon(\n              style: _getButtonStyle(theme),\n              onPressed: _getOnPressed,\n              label: _getButtonChild(theme),\n              icon: variant.isLoading\n                  ? const _LoadingIndicator()\n                  : Icon(variant.icon, size: variant.iconSize),\n            );\n          }\n          return ElevatedButton(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            child: variant.isLoading\n                ? const _LoadingIndicator()\n                : Icon(variant.icon, size: variant.iconSize),\n          );\n        }\n      case const (OutlineButtonVariant):\n      case const (GhostButtonVariant):\n        if (variant.icon == null) {\n          return TextButton(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            child: _getButtonChild(theme),\n          );\n        } else {\n          return TextButton.icon(\n            style: _getButtonStyle(theme),\n            onPressed: _getOnPressed,\n            label: _getButtonChild(theme),\n            icon: variant.isLoading\n                ? const _LoadingIndicator()\n                : Icon(variant.icon, size: variant.iconSize),\n          );\n        }\n      default:\n        return const SizedBox();\n    }\n  }\n\n  VoidCallback? get _getOnPressed {\n    switch (variant.runtimeType) {\n      default:\n        if (variant.isLoading) return null;\n        return variant.onPressed;\n    }\n  }\n\n  Color? _getBackgroundColor(ThemeData theme) {\n    if (variant.backgroundColor != null) return variant.backgroundColor;\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n        return theme.colorScheme.primary;\n      case const (SecondaryButtonVariant):\n        return theme.colorScheme.secondary;\n      case const (TertiaryButtonVariant):\n        return theme.colorScheme.tertiary;\n      case const (ErrorButtonVariant):\n        return theme.colorScheme.error;\n      default:\n        return null;\n    }\n  }\n\n  Color? _getForegroundColor(ThemeData theme) {\n    if (variant.foregroundColor != null) return variant.foregroundColor;\n    switch (variant.runtimeType) {\n      case const (PrimaryButtonVariant):\n      case const (ErrorButtonVariant):\n        return theme.colorScheme.onPrimary;\n      case const (SecondaryButtonVariant):\n        return theme.colorScheme.onSecondary;\n      case const (TertiaryButtonVariant):\n        return theme.colorScheme.onTertiary;\n      default:\n        return null;\n    }\n  }\n\n  Widget _getButtonChild(ThemeData theme) {\n    final ch = variant.child ?? Text(_getText());\n    if (variant.icon == null) {\n      if (variant.isLoading) {\n        return Row(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            const _LoadingIndicator(),\n            const SizedBox(width: 8),\n            ch,\n          ],\n        );\n      }\n    }\n    return ch;\n  }\n\n  String _getText() {\n    return variant.text ?? 'Button';\n  }\n\n  BorderSide? _getBorder(ThemeData theme) {\n    switch (variant.runtimeType) {\n      case const (OutlineButtonVariant):\n        return BorderSide(color: theme.colorScheme.onPrimary.withOpacity(.2));\n      default:\n        return null;\n    }\n  }\n\n  OutlinedBorder? _getShape(ThemeData theme) {\n    switch (variant.runtimeType) {\n      default:\n        return RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(6),\n        );\n    }\n  }\n}\n\nclass _LoadingIndicator extends StatelessWidget {\n  const _LoadingIndicator();\n\n  @override\n  Widget build(BuildContext context) {\n    return const SizedBox(\n      width: 20,\n      height: 20,\n      child: CircularProgressIndicator(strokeWidth: 2),\n    );\n  }\n}\n"
  },
  {
    "name": "card",
    "version": "0.0.1",
    "content": "//v0.0.1\n\nimport 'package:fcnui_base/fcnui_base.dart';\nimport 'package:flutter/material.dart';\n\nclass CardVariant extends Equatable {\n  final CardTitle title;\n\n  final CardSubtitle? subtitle;\n\n  final CardContent content;\n\n  final CardFooter footer;\n\n  const CardVariant({\n    required this.title,\n    this.subtitle,\n    required this.content,\n    required this.footer,\n  });\n\n  @override\n  List<Object?> get props => [title, content, footer, subtitle];\n}\n\nclass CardDecoration extends Equatable {\n  final EdgeInsetsGeometry? padding;\n  final Border? border;\n  final BorderRadiusGeometry borderRadius;\n  final Color? color;\n  final List<BoxShadow>? boxShadow;\n  final CrossAxisAlignment childrenCrossAxisAlignment;\n\n  const CardDecoration({\n    this.padding,\n    this.border,\n    this.boxShadow,\n    this.borderRadius = const BorderRadius.all(Radius.circular(8)),\n    this.color,\n    this.childrenCrossAxisAlignment = CrossAxisAlignment.start,\n  });\n\n  @override\n  List<Object?> get props => [padding, border, borderRadius, color];\n}\n\nclass CardTitle extends Equatable {\n  final String title;\n\n  /// If [style] is null, it will use the default style\n  final TextStyle? style;\n\n  const CardTitle({\n    required this.title,\n    this.style,\n  });\n\n  @override\n  List<Object?> get props => [title, style];\n}\n\nclass CardSubtitle extends Equatable {\n  final String subtitle;\n\n  /// If [style] is null, it will use the default style\n  final TextStyle? style;\n\n  const CardSubtitle({\n    required this.subtitle,\n    this.style,\n  });\n\n  @override\n  List<Object?> get props => [subtitle, style];\n}\n\nclass CardContent extends Equatable {\n  final Widget content;\n\n  const CardContent({\n    required this.content,\n  });\n\n  @override\n  List<Object?> get props => [content];\n}\n\nclass CardFooter extends Equatable {\n  final List<Widget> footer;\n\n  final MainAxisAlignment mainAxisAlignment;\n\n  final Axis direction;\n\n  const CardFooter({\n    required this.footer,\n    this.mainAxisAlignment = MainAxisAlignment.spaceBetween,\n    this.direction = Axis.horizontal,\n  });\n\n  @override\n  List<Object?> get props => [footer, mainAxisAlignment, direction];\n}\n\nclass CardCustom extends Equatable {\n  final Widget widget;\n\n  const CardCustom({\n    required this.widget,\n  });\n\n  @override\n  List<Object?> get props => [widget];\n}\n\nclass DefaultCard extends StatelessWidget {\n  final CardVariant? variant;\n  final CardCustom? custom;\n  final CardDecoration decoration;\n\n  const DefaultCard({\n    super.key,\n    this.variant,\n    this.custom,\n    this.decoration = const CardDecoration(),\n  })\n  //Assert 1 of them is not null\n  : assert(variant != null || custom != null,\n            'DefaultCard: variant and custom cannot be null at the same time');\n\n  @override\n  Widget build(BuildContext context) {\n    return ThemeProvider(\n      builder: (context, vm) {\n        return getChild(vm);\n      },\n    );\n  }\n\n  Widget getChild(ThemeVm vm) {\n    return _getCard(vm.theme);\n  }\n\n  Widget _getCard(ThemeData theme) {\n    final EdgeInsets defaultPadding = const EdgeInsets.all(24).w;\n    final List<BoxShadow> cardShadow = [\n      BoxShadow(\n        offset: const Offset(0, 2).w,\n        blurRadius: 4.r,\n        spreadRadius: 0,\n        color: Colors.black.withOpacity(0.08),\n      ),\n      BoxShadow(\n        offset: const Offset(0, 3).w,\n        blurRadius: 10.r,\n        spreadRadius: 0,\n        color: Colors.black.withOpacity(0.1),\n      )\n    ];\n\n    final border = Border.all(\n            color: theme.colorScheme.onSurface.withOpacity(0.1),\n            width: 1,\n            strokeAlign: BorderSide.strokeAlignInside)\n        .w;\n\n    final color = decoration.color ?? theme.colorScheme.surface;\n\n    return DecoratedBox(\n        decoration: BoxDecoration(\n          color: color,\n          borderRadius: decoration.borderRadius,\n          boxShadow: decoration.boxShadow ?? cardShadow,\n          border: decoration.border ?? border,\n        ),\n        child: custom == null\n            ? Padding(\n                padding: decoration.padding ?? defaultPadding,\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  crossAxisAlignment: decoration.childrenCrossAxisAlignment,\n                  children: [\n                    _getTitle(theme),\n                    if (variant!.subtitle != null) _getSubtitle(theme),\n                    _getContent(theme),\n                    _getFooter(theme),\n                  ],\n                ),\n              )\n            : Padding(\n                padding: decoration.padding ?? defaultPadding,\n                child: custom!.widget,\n              ));\n  }\n\n  Widget _getTitle(ThemeData theme) {\n    final title = variant!.title;\n    return Text(\n      title.title,\n      style: (title.style ??\n              theme.textTheme.headlineSmall!\n                  .copyWith(fontWeight: FontWeight.bold))\n          .sp,\n    );\n  }\n\n  Widget _getSubtitle(ThemeData theme) {\n    final subtitle = variant!.subtitle!;\n\n    Widget widget = Text(\n      subtitle.subtitle,\n      style: (subtitle.style ??\n              theme.textTheme.labelLarge!.copyWith(\n                  fontWeight: FontWeight.normal,\n                  color: theme.colorScheme.onSurface.withOpacity(0.6)))\n          .sp,\n    );\n\n    return Padding(\n      padding: EdgeInsets.only(top: 12.h),\n      child: widget,\n    );\n  }\n\n  Widget _getContent(ThemeData theme) {\n    final content = variant!.content;\n\n    Widget widget = content.content;\n\n    return Padding(\n      padding: EdgeInsets.only(top: 22.h),\n      child: widget,\n    );\n  }\n\n  Widget _getFooter(ThemeData theme) {\n    final footer = variant!.footer;\n\n    Widget widget = Row(\n      mainAxisAlignment: footer.mainAxisAlignment,\n      children: footer.footer.length == 1\n          ? [Expanded(child: footer.footer.first)]\n          : footer.footer,\n    );\n\n    return Padding(\n      padding: EdgeInsets.only(top: 22.h),\n      child: widget,\n    );\n  }\n}\n"
  }
]